local Util = require("aether.utils")

local M = {}

---@type aether.HighlightsFn
function M.get(c, opts)
  -- stylua: ignore
  return {
    Comment                     = { fg = c.comment, style = opts.styles.comments }, -- any comment
    ColorColumn                 = { bg = c.black }, -- used for the columns set with 'colorcolumn'
    Conceal                     = { fg = c.dark5 }, -- placeholder characters substituted for concealed text
    Cursor                      = { fg = c.bg, bg = c.fg }, -- character under the cursor
    lCursor                     = { fg = c.bg, bg = c.fg },
    CursorIM                    = { fg = c.bg, bg = c.fg },
    CursorColumn                = { bg = c.bg_highlight },
    CursorLine                  = { bg = c.cursorline_bg },
    Directory                   = { fg = c.blue, bold = true },
    DiffAdd                     = { bg = c.diff.add },
    DiffChange                  = { bg = c.diff.change },
    DiffDelete                  = { bg = c.diff.delete },
    DiffText                    = { bg = c.diff.text },
    EndOfBuffer                 = { fg = c.bg },
    ErrorMsg                    = { fg = c.error, bold = true },
    VertSplit                   = { fg = c.border },
    WinSeparator                = { fg = c.border, bold = true },
    Folded                      = { fg = c.blue, bg = c.fg_gutter, style = opts.styles.comments },
    FoldColumn                  = { bg = opts.transparent and c.none or c.bg, fg = c.comment },
    SignColumn                  = { bg = opts.transparent and c.none or c.bg, fg = c.fg_gutter },
    SignColumnSB                = { bg = c.bg_sidebar, fg = c.fg_gutter },
    Substitute                  = { bg = c.red, fg = c.black },
    LineNr                      = { fg = c.fg_gutter },
    CursorLineNr                = { fg = c.orange, bold = true },
    LineNrAbove                 = { fg = c.fg_gutter },
    LineNrBelow                 = { fg = c.fg_gutter },
    MatchParen                  = { fg = c.orange, bold = true },
    ModeMsg                     = { fg = c.fg_dark, bold = true },
    MsgArea                     = { fg = c.fg_dark },
    MoreMsg                     = { fg = c.blue, bold = true },
    NonText                     = { fg = c.dark3 },
    Normal                      = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
    NormalNC                    = { fg = c.fg, bg = opts.transparent and c.none or opts.dim_inactive and c.bg_dark or c.bg },
    NormalSB                    = { fg = c.fg_sidebar, bg = c.bg_sidebar },
    NormalFloat                 = { fg = c.fg_float, bg = c.bg_float },
    FloatBorder                 = { fg = c.border_highlight, bg = c.bg_float },
    FloatTitle                  = { fg = c.border_highlight, bg = c.bg_float, bold = true },
    Pmenu                       = { bg = c.bg_popup, fg = c.fg },
    PmenuMatch                  = { bg = c.bg_popup, fg = c.blue1 },
    PmenuSel                    = { bg = Util.blend_bg(c.fg_gutter, 0.8) },
    PmenuMatchSel               = { bg = Util.blend_bg(c.fg_gutter, 0.8), fg = c.blue1 },
    PmenuSbar                   = { bg = Util.blend_fg(c.bg_popup, 0.95) },
    PmenuThumb                  = { bg = c.fg_gutter },
    Question                    = { fg = c.blue, bold = true },
    QuickFixLine                = { bg = c.bg_visual, bold = true },
    Search                      = { bg = c.bg_search, fg = c.fg, bold = true },
    IncSearch                   = { bg = c.orange, fg = c.black, bold = true },
    CurSearch                   = "IncSearch",
    SpecialKey                  = { fg = c.dark3 },
    SpellBad                    = { sp = c.error, undercurl = true },
    SpellCap                    = { sp = c.warning, undercurl = true },
    SpellLocal                  = { sp = c.info, undercurl = true },
    SpellRare                   = { sp = c.hint, undercurl = true },
    StatusLine                  = { fg = c.fg_sidebar, bg = c.bg_statusline },
    StatusLineNC                = { fg = c.fg_gutter, bg = c.bg_statusline },
    TabLine                     = { bg = c.bg_statusline, fg = c.fg_gutter },
    TabLineFill                 = { bg = c.black },
    TabLineSel                  = { fg = c.black, bg = c.blue },
    Title                       = { fg = c.blue, bold = true },
    Visual                      = { bg = c.bg_visual },
    VisualNOS                   = { bg = c.bg_visual },
    WarningMsg                  = { fg = c.warning, bold = true },
    Whitespace                  = { fg = c.fg_gutter },
    WildMenu                    = { bg = c.bg_visual },
    WinBar                      = { link = "StatusLine" },
    WinBarNC                    = { link = "StatusLineNC" },

    -- Syntax
    Constant                    = { fg = c.purple },
    String                      = { fg = c.green },
    Character                   = { fg = c.green },
    Number                      = { fg = c.orange },
    Boolean                     = { fg = c.orange },
    Float                       = { fg = c.orange },
    Identifier                  = { fg = c.fg, style = opts.styles.variables },
    Function                    = { fg = c.red, bold = true, style = opts.styles.functions },
    Statement                   = { fg = c.blue, bold = true },
    Conditional                 = { fg = c.purple },
    Repeat                      = { fg = c.purple },
    Label                       = { fg = c.yellow },
    Operator                    = { fg = c.fg },
    Keyword                     = { fg = c.purple, bold = true, style = opts.styles.keywords },
    Exception                   = { fg = c.red },
    PreProc                     = { fg = c.cyan },
    Include                     = { fg = c.blue },
    Define                      = { fg = c.purple },
    Macro                       = { fg = c.cyan },
    PreCondit                   = { fg = c.cyan },
    Type                        = { fg = c.yellow, bold = true },
    StorageClass                = { fg = c.yellow },
    Structure                   = { fg = c.yellow },
    Typedef                     = { fg = c.yellow },
    Special                     = { fg = c.cyan },
    SpecialChar                 = { fg = c.base0F },
    Tag                         = { fg = c.red },
    Delimiter                   = { fg = c.fg },
    SpecialComment              = { fg = c.comment, style = opts.styles.comments },
    Debug                       = { fg = c.red },
    Underlined                  = { underline = true },
    Ignore                      = { fg = c.dark3 },
    Error                       = { fg = c.error, bold = true },
    Todo                        = { bg = c.yellow, fg = c.bg, bold = true },
    
    debugBreakpoint             = { bg = Util.blend_bg(c.info, 0.1), fg = c.info },
    debugPC                     = { bg = c.bg_sidebar },
    dosIniLabel                 = "@property",
    helpCommand                 = { bg = c.terminal_black, fg = c.blue },
    htmlH1                      = { fg = c.magenta, bold = true },
    htmlH2                      = { fg = c.blue, bold = true },
    qfFileName                  = { fg = c.blue },
    qfLineNr                    = { fg = c.dark5 },

    -- LSP
    LspReferenceText            = { bg = c.fg_gutter },
    LspReferenceRead            = { bg = c.fg_gutter, fg = c.bg },
    LspReferenceWrite           = { bg = c.fg_gutter },
    LspSignatureActiveParameter = { bg = Util.blend_bg(c.bg_visual, 0.4), bold = true },
    LspCodeLens                 = { fg = c.comment },
    LspInlayHint                = { bg = Util.blend_bg(c.blue7, 0.1), fg = c.dark3 },
    LspInfoBorder               = { fg = c.border_highlight, bg = c.bg_float },

    -- Diagnostics
    DiagnosticError             = { fg = c.error },
    DiagnosticWarn              = { fg = c.warning },
    DiagnosticInfo              = { fg = c.info },
    DiagnosticHint              = { fg = c.hint },
    DiagnosticUnnecessary       = { fg = c.terminal_black },
    DiagnosticVirtualTextError  = { bg = Util.blend_bg(c.error, 0.1), fg = c.error },
    DiagnosticVirtualTextWarn   = { bg = Util.blend_bg(c.warning, 0.1), fg = c.warning },
    DiagnosticVirtualTextInfo   = { bg = Util.blend_bg(c.info, 0.1), fg = c.info },
    DiagnosticVirtualTextHint   = { bg = Util.blend_bg(c.hint, 0.1), fg = c.hint },
    DiagnosticUnderlineError    = { undercurl = true, sp = c.error },
    DiagnosticUnderlineWarn     = { undercurl = true, sp = c.warning },
    DiagnosticUnderlineInfo     = { undercurl = true, sp = c.info },
    DiagnosticUnderlineHint     = { undercurl = true, sp = c.hint },

    -- Health
    healthError                 = { fg = c.error },
    healthSuccess               = { fg = c.green1 },
    healthWarning               = { fg = c.warning },

    -- Git
    diffAdded                   = { bg = c.diff.add, fg = c.git.add },
    diffRemoved                 = { bg = c.diff.delete, fg = c.git.delete },
    diffChanged                 = { bg = c.diff.change, fg = c.git.change },
    diffOldFile                 = { fg = c.blue1, bg = c.diff.delete },
    diffNewFile                 = { fg = c.blue1, bg = c.diff.add },
    diffFile                    = { fg = c.blue },
    diffLine                    = { fg = c.comment },
    diffIndexLine               = { fg = c.magenta },
  }
end

return M
